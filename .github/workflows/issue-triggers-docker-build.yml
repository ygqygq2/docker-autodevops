name: Issue triggers publish docker image

on:
  issues:
    types: [opened]
  label:
    types: [created]

env:
  DOCKER_USERNAME: "ygqygq2"

jobs:
  push_to_registries:
    name: Push Docker image to multiple registries
    runs-on: ubuntu-latest

    outputs:
      DOCKER_CONTEXT: ${{ steps.getIssueInfo.outputs.DOCKER_CONTEXT }}
      SUCCESS: ${{ steps.successCheck.outputs.SUCCESS }}

    steps:
      - name: Get issue info
        id: getIssueInfo
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');

            function getStat(path){
              return new Promise((resolve, reject) => {
                fs.stat(path, (err, stats) => {
                  if(err){
                    resolve(false);
                  }else{
                    resolve(stats);
                  }
                })
              })
            }

            // comment 显示构建进展链接
            const issues_body = `构建进展，详见 [构建任务](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${{github.run_id}})`
            const issuesComment = await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: issues_body
            });
            console.log("create issues comment resp:", issuesComment["status"]);

            // 使用 title 获取  docker context
            const title = context?.payload?.issue?.title || '';

            // 使用 body 获取 build-arg
            const body = context?.payload?.issue?.body || '';

            // 如果 title 中含冒号，则冒号前为构建目录，冒号后为镜像 tag
            let dir = '';
            let tmp_dir = '';
            let tag = '';
            let dockerfile = '';

            [tmp_dir, tag] = title.split(':');
            [dir, dockerfile] = tmp_dir.split('/');

            if(!tag) {
              // 使用 年-月-日-时-分 为 docker tag
              const time = new Date(new Date().getTime()+(parseInt(new Date().getTimezoneOffset()/60) + 8)*3600*1000);
              const year = time.getFullYear();
              const month = time.getMonth() + 1;
              const day = time.getDay();
              const hour = time.getHours();
              const  minite = time.getMinutes();
              tag = `${year}-${month}-${day}-${hour}-${minite}`;
            }

            if (!dockerfile) {
              dockerfile = 'Dockerfile';
            }

            // 判断目录是否存在
            const isExists = await getStat(dir);
            if(isExists && isExists.isDirectory()){
              core.setOutput('DOCKER_CONTEXT', dir);
            } else {
              core.setFailed('构建的目录不存在，请检查 issue 标题是否为目录名');
            }

            if (body.length > 0) {
              core.setOutput('BUILD_ARGS', body);
            }

            core.setOutput('DOCKER_FILE', dockerfile);
            core.setOutput('TAG', tag);

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v3
        with:
          context: "${{ steps.getIssueInfo.outputs.DOCKER_CONTEXT }}"
          file: "${{ steps.getIssueInfo.outputs.DOCKER_CONTEXT }}/${{ steps.getIssueInfo.outputs.DOCKER_FILE }}"
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/${{ steps.getIssueInfo.outputs.DOCKER_CONTEXT }}:${{ steps.getIssueInfo.outputs.TAG }}
            ygqygq2/${{ steps.getIssueInfo.outputs.DOCKER_CONTEXT }}:${{ steps.getIssueInfo.outputs.TAG }}
          build-args: |
            ${{ steps.getIssueInfo.outputs.BUILD_ARGS }}

      - name: Success check
        id: successCheck
        uses: actions/github-script@v6
        if: ${{ success() }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            core.setOutput('SUCCESS', true)

      - name: Close Issues
        id: closeIssues
        uses: actions/github-script@v6
        if: ${{ always() }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const issuesResponse = await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              state: "closed"
            });
            console.log("update issues resp:", issuesResponse["status"] == 200 ? "success" : "failed" );

            let labels = [];
            let body = `构建失败，详见 [构建任务](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${{github.run_id}})`;
            const success = String(${{ steps.successCheck.outputs.SUCCESS }}).toLowerCase() == "true";
            console.log("is success?", success);

            if(success){
              body = `构建完成，您可以使用镜像 <br/>\n\`ygqygq2/${{ steps.getIssueInfo.outputs.DOCKER_CONTEXT }}:${{ steps.getIssueInfo.outputs.TAG }}\``;
              labels = ['success'];
            }else{
              const jobsResponse = await github.request(`GET /repos/${context.repo.owner}/${context.repo.repo}/actions/runs/${{github.run_id}}/jobs`, {
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: ${{ github.run_id }}
              });
              console.log("jobs",jobsResponse['data']);

              body += "\n\n 日志:\n\n";
              for(let job of jobsResponse['data']['jobs']){
                  body += "- ["+job.name+"]("+job.html_url+")";
              }
              labels = ['failure'];
            }

            const issuesComment = await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
            });
            console.log(issuesComment);
            console.log("create issues comment resp:", issuesComment["status"] == 201 ? "success" : "failed" );

            if(labels){
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: labels
              });
            }
