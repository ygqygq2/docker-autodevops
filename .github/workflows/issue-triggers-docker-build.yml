name: Issue triggers publish docker image

on:
  issues:
    types: [opened]
  label:
    types: [created]

env:
  REPO_NAME: ${{ github.event.repository.name }}
  GH_USER: ${{ github.actor }}

jobs:
  push_to_registries:
    name: Push Docker image to multiple registries
    runs-on: ubuntu-latest

    outputs:
      DOCKER_CONTEXT: ${{ steps.getIssueInfo.outputs.DOCKER_CONTEXT }}
      SUCCESS: ${{ steps.successCheck.outputs.SUCCESS }}

    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get issue info
        id: getIssueInfo
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');
            function getStat(path){
              return new Promise((resolve, reject) => {
                fs.stat(path, (err, stats) => {
                  if(err){
                    resolve(false);
                  }else{
                    resolve(stats);
                  }
                })
              })
            }

            const ev = JSON.parse(
              fs.readFileSync(process.env.GITHUB_EVENT_PATH, 'utf8')
            );

            // 获取 issue_number
            // const issue_number = ev.issue.number;
            const issue_number = 13;

            // 使用 title 获取  docker context
            // const title = ev?.issue?.title || '';
            const title = 'k8s-alpine';
            // 使用 body 获取 build-arg
            const body = ev?.issue?.body || '';

            // 使用 年-月-日-时-分 为 docker tag
            const time = new Date(new Date().getTime()+(parseInt(new Date().getTimezoneOffset()/60) + 8)*3600*1000);
            const year = time.getFullYear();
            const month = time.getMonth() + 1;
            const day = time.getDay();
            const hour = time.getHours();
            const  minite = time.getMinutes();
            const tag = `${year}-${month}-${day}-${hour}-${minite}`;

            core.setOutput('ISSUE_NUMBER', issue_number);

            // 判断目录是否存在
            const isExists = await getStat(title);
            if(isExists && isExists.isDirectory()){
              core.setOutput('DOCKER_CONTEXT', title);
            } else {
              core.setOutput('构建的目录不存在，请检查 issue 标题是否为目录名', false)
            }

            core.setOutput('TAG', tag);
            if (body.length > 0) {
              core.setOutput('BUILD_ARGS', body);
            }

      # - name: Build and push Docker images
      #   uses: docker/build-push-action@v3
      #   with:
      #     context: "${{ steps.getIssueInfo.outputs.DOCKER_CONTEXT }}"
      #     file: "${{ steps.getIssueInfo.outputs.DOCKER_CONTEXT }}/Dockerfile"
      #     push: true
      #     tags: |
      #       ghcr.io/${{ github.repository }}/${{ steps.getIssueInfo.outputs.DOCKER_CONTEXT }}:${{ steps.getIssueInfo.outputs.TAG }}
      #       ygqygq2/${{ steps.getIssueInfo.outputs.DOCKER_CONTEXT }}:${{ steps.getIssueInfo.outputs.TAG }}
      #     build-args: |
      #       ${{ steps.getIssueInfo.outputs.BUILD_ARGS }}

      - name: Success check
        id: successCheck
        uses: actions/github-script@v6
        if: ${{ success() }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            core.setOutput('SUCCESS', true)

      - name: Close Issues
        id: closeIssues
        uses: actions/github-script@v6
        if: ${{ always() }}
        with:
          script: |
            if (${{ steps.getIssueInfo.outputs.ISSUE_NUMBER }} > 0){
              const issuesResponse = await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: ${{ steps.getIssueInfo.outputs.ISSUE_NUMBER }},
                state: 'closed'
              });
              // console.log("update issues resp:", issuesResponse["status"] == 200 ? "success" : "failed" );
            }
